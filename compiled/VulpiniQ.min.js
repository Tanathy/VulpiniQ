const Q=(()=>{ 'use strict'; const _ob=Object, _ar=Array, _ma=Math, _da=Date, _re=RegExp, _st=setTimeout, _un=undefined, _n=null, _nl=NodeList, _el=Element, _si=setInterval, _c=console, _ct=clearTimeout, _ci=clearInterval, _pr=Promise, _str=String, _nu=Number, _bo=Boolean, _json=JSON, _map=Map, _set=Set, _sym=Symbol, _win=window, _doc=document, _loc=location, _hist=history, _ls=localStorage, _ss=sessionStorage, _f=fetch, _ev=Event, _ac=AbortController, _as=AbortSignal, _err=Error; let GLOBAL={}; let styleData ={ root: '', generic: "", responsive: {}, element: _n, init: false }; function applyStyles(){ if(!styleData.init){ styleData.element=document.getElementById('qlib-root-styles') || createStyleElement(); styleData.init=true; } let finalStyles=styleData.root ? `:root {${styleData.root}}\n` : ''; finalStyles += styleData.generic; const breakpoints=_ob.keys(styleData.responsive); for (let i=0; i < breakpoints.length; i++){ const size=breakpoints[i]; const css=styleData.responsive[size]; if(css){ finalStyles += `\n@media (max-width: ${size}) {\n${css}\n}`; } } styleData.element.textContent=finalStyles; } function createStyleElement(){ const styleElement=document.createElement('style'); styleElement.id='qlib-root-styles'; document.head.insertBefore(styleElement, document.head.firstChild); return styleElement; } window.addEventListener('load', applyStyles, {once: true}); function Q(identifier, attributes, props){ if(!(this instanceof Q)) return new Q(identifier, attributes, props); if(identifier && identifier.nodeType){ this.nodes=[identifier]; return; } if(identifier instanceof Q){ this.nodes=identifier.nodes; return; } if(identifier?.constructor === _nl){ this.nodes=_ar.from(identifier); return; } if(typeof identifier === 'string'){ const isCreating=attributes || identifier.indexOf('<') > -1; if(isCreating){ const template=document.createElement('template'); template.innerHTML=identifier.trim(); this.nodes=_ar.from(template.content.childNodes); if(attributes){ const attrEntries=_ob.entries(attributes); for (let i=0, n=this.nodes.length; i < n; i++){ const element=this.nodes[i]; for (let j=0, m=attrEntries.length; j < m; j++){ const [attr, val]=attrEntries[j]; if(attr === 'class'){ element.classList.add(...(Array.isArray(val) ? val : val.split(/\s+/))); }else if(attr === 'style'){ if(typeof val === 'object'){ const styleEntries=_ob.entries(val); for (let k=0, p=styleEntries.length; k < p; k++){ const [prop, propVal]=styleEntries[k]; element.style[prop]=propVal; } }else{ element.style.cssText=val; } }else if(attr === 'text'){ element.textContent=val; }else if(attr === 'html'){ element.innerHTML=val; }else{ element.setAttribute(attr, val); } } } } if(props){ for (let i=0, n=this.nodes.length; i < n; i++){ const element=this.nodes[i]; for (let j=0, m=props.length; j < m; j++){ element[props[j]]=true; } } } }else{ this.nodes=_ar.from(document.querySelectorAll(identifier)); } }} Q.Ext=(methodName, functionImplementation)=> (Q.prototype[methodName]=functionImplementation, Q); Q.getGLOBAL=key=>GLOBAL[key]; Q.setGLOBAL=value=>(GLOBAL={...GLOBAL, ...value}); Q.style=(root='', style='', responsive=_n, mapping=_n)=>{ if(mapping){ const keys=_ob.keys(mapping); keys.forEach((key)=>{ let newKey=Q.ID ? Q.ID(5, '_') : `_${_ma.random().toString(36).substring(2, 7)}`; if(style && typeof style === 'string'){ style=style.replace(new _re(`\\b${key}\\b`, 'gm'), newKey); } mapping[key]=mapping[key].replace(key, newKey); }); } if(root && typeof root === 'string'){ styleData.root += root.trim() + ';'; } if(style && typeof style === 'string'){ styleData.generic += style; } if(responsive && typeof responsive === 'object'){ const breakpoints=_ob.entries(responsive); for (let i=0; i < breakpoints.length; i++){ const [size, css]=breakpoints[i]; if(css && typeof css === 'string'){ if(!styleData.responsive[size]){ styleData.responsive[size]=''; } styleData.responsive[size] += css + '\n'; } } } if(document.readyState === 'complete'){ applyStyles(); } return mapping; }; Q._ ={ ob: _ob, ar: _ar, ma: _ma, da: _da, re: _re, st: _st, un: _un, n: _n, nl: _nl, el: _el, si: _si, c: _c, ct: _ct, ci: _ci, pr: _pr, str: _str, nu: _nu, bo: _bo, json: _json, map: _map, set: _set, sym: _sym, win: _win, doc: _doc, loc: _loc, hist: _hist, ls: _ls, ss: _ss, f: _f, ev: _ev, ac: _ac, as: _as, err: _err }; Q.Ext('addClass', function (classes){ var b=classes.split(' '), nodes=this.nodes; for (var i=0, l=nodes.length; i < l; i++){ nodes[i].classList.add.apply(nodes[i].classList, b); } return this;});Q.Ext('animate', function (duration, b, e){var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ var f=nodes[i], keys=Object.keys(b), c=''; for (var j=0, klen=keys.length; j < klen; j++){ c += keys[j] + ' ' + duration + 'ms' + (j < klen - 1 ? ', ' : ''); } f.style.transition=c; for (var j=0; j < klen; j++){ var d=keys[j]; f.style[d]=b[d]; } if(typeof e === 'function'){ setTimeout((function(g){ return function(){e.call(g);}; })(f), duration); }} return this;});Q.Ext('append', function (...contents){const nodes=this.nodes; for (let i=0, len=nodes.length; i < len; i++){ const parent=nodes[i]; for (let j=0, clen=contents.length; j < clen; j++){ const child=contents[j]; if(typeof child === "string"){ parent.insertAdjacentHTML('beforeend', child); }else if(child?.nodeType === 1 || child instanceof Q){ parent.appendChild(child.nodes ? child.nodes[0] : child); }else if(Array.isArray(child) || child?.constructor === NodeList){ const subNodes=Array.from(child); for (let k=0, slen=subNodes.length; k < slen; k++){ parent.appendChild(subNodes[k]); } }}} return this;});Q.Ext('attr', function (attribute, value){ var nodes=this.nodes; if(typeof attribute === 'object'){ var keys=Object.keys(attribute); for (var i=0, len=nodes.length; i < len; i++){ var node=nodes[i]; for (var j=0, klen=keys.length; j < klen; j++){ node.setAttribute(keys[j], attribute[keys[j]]); } } return this; }else{ if(value === undefined){ return nodes[0] && nodes[0].getAttribute(attribute) || null; } for (var i=0, len=nodes.length; i < len; i++){ nodes[i].setAttribute(attribute, value); } return this; }});Q.Ext('bind', function (event, handler){ if(!this._eventDelegation){ this._eventDelegation={}; } if(!this._eventDelegation[event]){ document.addEventListener(event, (e)=>{ var nodes=this.nodes; for (var i=0, l=nodes.length; i < l; i++){ if(nodes[i].contains(e.target)){ handler.call(e.target, e); } } }); this._eventDelegation[event]=true; } return this;});Q.Ext('blur', function (){ var nodes=this.nodes; // ...existing code... for (var i=0, l=nodes.length; i < l; i++){ nodes[i].blur(); } return this;});Q.Ext('click', function (){ var nodes=this.nodes; for (var i=0, l=nodes.length; i < l; i++){ nodes[i].click(); } return this;});Q.Ext('clone', function (){ return new Q(this.nodes[0].cloneNode(true));});Q.Ext('closest', function (selector){ let node=this.nodes[0]; while (node){ if(node.matches && node.matches(selector)){ return new Q(node); } node=node.parentElement; } return null;});Q.Ext('css', function(property, value){const nodes=this.nodes; if(typeof property === 'object'){ for (let i=0, len=nodes.length; i < len; i++){ const style=nodes[i].style; for (const key in property){ style[key]=property[key]; } } return this;}if(value === Q._.un) return getComputedStyle(nodes[0])[property]; for (let i=0, len=nodes.length; i < len; i++){ nodes[i].style[property]=value;}return this;});Q.Ext('data', function (key, value){ const nodes=this.nodes; if(value === Q._.un){ return nodes[0] && nodes[0].dataset[key] || Q._.n; } for (let i=0, len=nodes.length; i < len; i++){ nodes[i].dataset[key]=value; } return this;});Q.Ext('each', function (callback){ if(!this.nodes) return this; const nodes=this.nodes; for (let i=0, len=nodes.length; i < len; i++){ callback.call(nodes[i], i, nodes[i]); } return this;});Q.Ext('empty', function (){var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ nodes[i].innerHTML='';}return this;});Q.Ext('eq', function (index){var node=this.nodes[index]; return node ? new Q(node) : null;});Q.Ext('fadeIn', function(duration, callback){ duration=duration || 400; var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ (function(el){ var style=el.style; style.display=''; style.transition='opacity ' + duration + 'ms'; void el.offsetHeight; style.opacity=1; setTimeout(function(){ style.transition=''; if(callback) callback(); }, duration); })(nodes[i]); } return this;});Q.Ext('fadeOut', function(duration, callback){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ (function(el){ var style=el.style; style.transition='opacity ' + duration + 'ms'; style.opacity=0; setTimeout(function(){ style.transition=''; style.display='none'; if(callback) callback(); }, duration); })(nodes[i]); } return this;});Q.Ext('fadeTo', function(opacity, duration, callback){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ (function(el){ var style=el.style; style.transition='opacity ' + duration + 'ms'; void el.offsetHeight; style.opacity=opacity; setTimeout(function(){ style.transition=''; if(callback) callback(); }, duration); })(nodes[i]); } return this;});Q.Ext('fadeToggle', function(duration, callback){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ var computed=window.getComputedStyle(nodes[i]); if(computed.opacity === '0'){ this.fadeIn(duration, callback); }else{ this.fadeOut(duration, callback); }} return this;});Q.Ext('find', function(selector){ var parent=this.nodes[0]; if(!parent) return null; var found=parent.querySelectorAll(selector); return found.length ? Q(found) : null;});Q.Ext('first', function (){ return new Q(this.nodes[0]);});Q.Ext('focus', function (){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ nodes[i].focus(); } return this;});Q.Ext('hasClass', function(className){ var node=this.nodes[0]; return (node && node.classList.contains(className)) || false;});Q.Ext('height', function (value){ var nodes=this.nodes; if(value === undefined){ return nodes[0].offsetHeight; } for (var i=0, len=nodes.length; i < len; i++){ nodes[i].style.height=value; } return this;});Q.Ext('hide', function (duration, callback){ duration=duration || 0; var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ var node=nodes[i]; if(duration === 0){ node.style.display='none'; if(callback) callback(); }else{ node.style.transition='opacity ' + duration + 'ms'; node.style.opacity=1; setTimeout((function(n){ return function(){ n.style.opacity=0; n.addEventListener('transitionend', function handler(){ n.style.display='none'; n.style.transition=''; n.removeEventListener('transitionend', handler); if(callback) callback(); }); }; })(node), 0); }} return this;});Q.Ext('html', function (content){ var nodes=this.nodes; if(content === undefined){ return nodes[0] ? nodes[0].innerHTML : null; } for (var i=0, len=nodes.length; i < len; i++){ var node=nodes[i]; node.innerHTML=''; var appendContent=function(child){ if(typeof child === 'string'){ node.insertAdjacentHTML('beforeend', child); }else if(child instanceof Q){ for (var j=0, clen=child.nodes.length; j < clen; j++){ node.appendChild(child.nodes[j]); } }else if(child?.nodeType === 1 || child?.nodeType != null){ node.appendChild(child); }else if(Array.isArray(child) || child?.constructor === NodeList){ var subs=Array.from(child); for (var k=0, slen=subs.length; k < slen; k++){ node.appendChild(subs[k]); } } }; if(Array.isArray(content) || content?.constructor === NodeList){ var contArr=Array.from(content); for (var m=0, mlen=contArr.length; m < mlen; m++){ appendContent(contArr[m]); } }else{ appendContent(content); }} return this;});Q.Ext('id', function (ident){ var node=this.nodes[0]; if(ident === undefined) return node.id; node.id=ident; return this;});Q.Ext('index', function (index){ var first=this.nodes[0]; if(index === undefined){ return Array.prototype.indexOf.call(first.parentNode.children, first); } var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ var node=nodes[i], parent=node.parentNode; if(!parent) continue; var children=Array.from(parent.children); parent.removeChild(node); if(index >= children.length){ parent.appendChild(node); }else{ parent.insertBefore(node, children[index]); }} return this;});Q.Ext('inside', function (selector){ var node=this.nodes[0]; return node ? node.closest(selector) !== null : false;});Q.Ext('is', function (selector){ var node=this.nodes[0]; if(!node) return false; if(typeof selector === 'function'){ return selector.call(node, 0, node); } if(typeof selector === 'string'){ switch (selector){ case ':visible': return node.offsetWidth > 0 && node.offsetHeight > 0; case ':hidden': return node.offsetWidth === 0 || node.offsetHeight === 0; case ':hover': return node === document.querySelector(':hover'); case ':focus': return node === document.activeElement; case ':blur': return node !== document.activeElement; case ':checked': return node.checked; case ':selected': return node.selected; case ':disabled': return node.disabled; case ':enabled': return !node.disabled; default: return node.matches(selector); }} if(selector?.nodeType === 1 || selector?.nodeType != null){ return node === selector; } if(selector instanceof Q){ return node === selector.nodes[0]; } return false;});Q.Ext('isExists', function (){ var node=this.nodes[0]; return node ? document.body.contains(node) : false;});Q.isExists=function (selector){ return document.querySelector(selector) !== null;};Q.Ext('last', function (){ var nodes=this.nodes; return new Q(nodes[nodes.length - 1]);});Q.Ext('map', function (callback){ var result=[], nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ result.push(callback(new Q(nodes[i]))); } return result;});Q.Ext('off', function (events, handler, options){ var defaultOptions={capture: false, once: false, passive: false}, opts=Object.assign({}, defaultOptions, options), eventList=events.split(' '), nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ for (var j=0, elen=eventList.length; j < elen; j++){ nodes[i].removeEventListener(eventList[j], handler, opts); }} return this;});Q.Ext('offset', function (){ var node=this.nodes[0], rect=node.getBoundingClientRect(); return{ top: rect.top + window.scrollY, left: rect.left + window.scrollX };});Q.Ext('on', function (events, handler, options){ var defaultOptions={capture: false, once: false, passive: false}, opts=Object.assign({}, defaultOptions, options), eventList=events.split(' '), nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ for (var j=0, elen=eventList.length; j < elen; j++){ nodes[i].addEventListener(eventList[j], handler, opts); }} return this;});Q.Ext('parent', function (){ var node=this.nodes[0]; return new Q(node ? node.parentNode : null);});Q.Ext('position', function (){ var node=this.nodes[0]; return{ top: node.offsetTop, left: node.offsetLeft };});Q.Ext('prepend', function (){ var nodes=this.nodes, contents=Array.prototype.slice.call(arguments), i, j, k, parent, child, subNodes; for (i=0; i < nodes.length; i++){ parent=nodes[i]; for (j=0; j < contents.length; j++){ child=contents[j]; if(typeof child === 'string'){ parent.insertAdjacentHTML('afterbegin', child); }else if(child instanceof Q){ parent.insertBefore(child.nodes[0], parent.firstChild); }else if(child?.nodeType === 1 || child?.nodeType != null){ parent.insertBefore(child, parent.firstChild); }else if(Array.isArray(child) || child?.constructor === NodeList){ subNodes=Array.from(child); for (k=0; k < subNodes.length; k++){ parent.insertBefore(subNodes[k], parent.firstChild); } } }} return this;});Q.Ext('prop', function (property, value){ var nodes=this.nodes; if(value === undefined){ return nodes[0] ? nodes[0][property] : null; } for (var i=0, len=nodes.length; i < len; i++){ nodes[i][property]=value; } return this;});Q.Ext('remove', function(){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ nodes[i].remove(); } return this;});Q.Ext('removeAttr', function (attribute){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ nodes[i].removeAttribute(attribute); } return this;});Q.Ext('removeClass', function (classes){ var list=classes.split(' '); for (var i=0, len=this.nodes.length; i < len; i++){ this.nodes[i].classList.remove.apply(this.nodes[i].classList, list); } return this;});Q.Ext('removeData', function (key){ for (let i=0, n=this.nodes.length; i < n; i++){ delete this.nodes[i].dataset[key]; } return this;});Q.Ext('removeProp', function (property){ for (let i=0, n=this.nodes.length; i < n; i++){ delete this.nodes[i][property]; } return this;});Q.Ext('removeTransition', function (){ for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].style.transition=''; } return this;});Q.Ext('scrollHeight', function (){ var node=this.nodes[0]; return node.scrollHeight;});Q.Ext('scrollLeft', function (value, increment){ const node=this.nodes[0]; if(value === undefined){ return node.scrollLeft; } for (let i=0, n=this.nodes.length; i < n; i++){ const current=this.nodes[i]; const maxScrollLeft=current.scrollWidth - current.clientWidth; current.scrollLeft=increment ? Math.min(current.scrollLeft + value, maxScrollLeft) : Math.min(value, maxScrollLeft); } return this;});Q.Ext('scrollTop', function (value, increment){ const node=this.nodes[0]; if(value === undefined){ return node.scrollTop; } for (let i=0, n=this.nodes.length; i < n; i++){ const current=this.nodes[i]; const maxScrollTop=current.scrollHeight - current.clientHeight; current.scrollTop=increment ? Math.min(current.scrollTop + value, maxScrollTop) : Math.min(value, maxScrollTop); } return this;});Q.Ext('scrollWidth', function (){ var node=this.nodes[0]; return node.scrollWidth;});Q.Ext('show', function (duration=0, callback){ for (let i=0, n=this.nodes.length; i < n; i++){ const element=this.nodes[i]; if(duration === 0){ element.style.display=''; if(callback) callback(); }else{ element.style.transition=`opacity ${duration}ms`; element.style.opacity=0; element.style.display=''; setTimeout(()=>{ element.style.opacity=1; element.addEventListener('transitionend', ()=>{ element.style.transition=''; if(callback) callback(); }, {once: true}); }, 0); }} return this;});Q.Ext('size', function (){ const node=this.nodes[0];return {width: node.offsetWidth,height: node.offsetHeight};});Q.Ext('text', function (content){ if(content === undefined){ return this.nodes[0]?.textContent || null; } for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].textContent=content; } return this;});Q.Ext('toggle', function (){ var nodes=this.nodes; for (var i=0, len=nodes.length; i < len; i++){ nodes[i].style.display=(nodes[i].style.display === 'none' ? '' : 'none'); } return this;});Q.Ext('toggleClass', function (className){ for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].classList.toggle(className); } return this;});Q.Ext('trigger', function (event){ for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].dispatchEvent(new Event(event)); } return this;});Q.Ext('unwrap', function (){ for (let i=0, n=this.nodes.length; i < n; i++){ const el=this.nodes[i]; const parent=el.parentNode; if(parent && parent !== document.body){ parent.replaceWith(...parent.childNodes); }} return this;});Q.Ext('val', function(input){ if(input === undefined) return this.nodes[0]?.value || null; for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].value=input; } return this;});Q.Ext('wait', function(ms) {return new Promise(resolve=>setTimeout(()=>resolve(this), ms));});Q.Ext('walk', function (callback, useQObject=false){ for (let i=0, n=this.nodes.length; i < n; i++){ const node=useQObject ? Q(this.nodes[i]) : this.nodes[i]; callback.call(this.nodes[i], node, i); } return this;});Q.Ext('width', function (value){ if(typeof value === 'undefined'){ return this.nodes[0] ? this.nodes[0].offsetWidth : undefined; } for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].style.width=value; } return this;});Q.Ext('wrap', function (wrapper){ for (let i=0, n=this.nodes.length; i < n; i++){ const node=this.nodes[i]; const parentNode=node.parentNode; let newParentElement; if(typeof wrapper === 'string'){ const tempDiv=document.createElement('div'); tempDiv.innerHTML=wrapper.trim(); newParentElement=tempDiv.firstElementChild.cloneNode(true); }else{ newParentElement=wrapper; } parentNode.insertBefore(newParentElement, node); newParentElement.appendChild(node); } return this;});Q.Ext('wrapAll', function (wrapper){ if(!this.nodes.length) return this; const parent=this.nodes[0].parentNode; let newParent=typeof wrapper === 'string' ? ((tempDiv=>(tempDiv.innerHTML=wrapper.trim(), tempDiv.firstElementChild)) (document.createElement('div'))) : wrapper; parent.insertBefore(newParent, this.nodes[0]); for (let i=0, n=this.nodes.length; i < n; i++){ newParent.appendChild(this.nodes[i]); } return this;});Q.Ext('zIndex', function (value){ const node=this.nodes[0]; if(!node) return; if(value === undefined){ let Index=node.style.zIndex || window.getComputedStyle(node).zIndex; return Index; } for (let i=0, n=this.nodes.length; i < n; i++){ this.nodes[i].style.zIndex=value; } return this;});Q.Done=((c)=>{ window.addEventListener("load",()=>{while(c.length)c.shift()();c=0}); return f=>c?c.push(f):f()})([])Q.Leaving=((c)=>{ let ev; window.addEventListener("beforeunload",e=>{ ev=e;while(c.length)c.shift()(e);c=0 }); return f=>c?c.push(f):f(ev) })([])Q.Ready=((c)=>{ document.readyState==='loading'?document.addEventListener("DOMContentLoaded",()=>{while(c.length)c.shift()();c=0},{once:1}):c=0; return f=>c?c.push(f):f(); })([])Q.Resize=((c)=>{ addEventListener("resize",()=>{ for(let i=0,l=c.length;i<l;) c[i++](innerWidth,innerHeight) }); return f=>c.push(f) })([])Q.AvgColor=(source, sampleSize, callback)=>{ const image=new Image(); image.crossOrigin='Anonymous'; if(typeof source === 'string') image.src=source; else if(source instanceof HTMLCanvasElement) image.src=source.toDataURL(); else return console.error("Invalid image source provided."); image.onload=()=>{ const canvas=Object.assign(document.createElement('canvas'), {width: image.width, height: image.height}); const context=canvas.getContext('2d'); context.drawImage(image, 0, 0); const data=context.getImageData(0, 0, image.width, image.height).data; const samplingRate=sampleSize === 'auto' ? Math.max(1, Math.ceil(Math.sqrt(image.width * image.height) / 32)) : (typeof sampleSize === 'number' && sampleSize > 0 ? sampleSize : 1); let totalRed=0, totalGreen=0, totalBlue=0, count=0; for (let index=0, len=data.length; index < len; index += samplingRate * 4){ totalRed += data[index]; totalGreen += data[index + 1]; totalBlue += data[index + 2]; count++; } const avgColor={r: (totalRed / count) | 0, g: (totalGreen / count) | 0, b: (totalBlue / count) | 0}; typeof callback === 'function' && callback(avgColor); }; image.onerror=()=>console.error("Failed to load image."); };Q.ColorBrightness=(inputColor, percent)=>{ if(!/^#|^rgb/.test(inputColor)) throw new Error('Unsupported c format'); let red, green, blue, alpha=1, isHex=false, factor=1 + percent / 100; if(inputColor[0] === '#'){ isHex=true; const hexString=inputColor.slice(1); if(hexString.length === 3){ red=parseInt(hexString[0] + hexString[0], 16); green=parseInt(hexString[1] + hexString[1], 16); blue=parseInt(hexString[2] + hexString[2], 16); }else if(hexString.length === 6){ red=parseInt(hexString.slice(0, 2), 16); green=parseInt(hexString.slice(2, 4), 16); blue=parseInt(hexString.slice(4, 6), 16); } }else{ const match=inputColor.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/); if(match){ red=+match[1]; green=+match[2]; blue=+match[3]; if(match[4] != null) alpha=parseFloat(match[4]); }} const clamp=value=>Math.min(255, Math.max(0, Math.round(value * factor))); red=clamp(red); green=clamp(green); blue=clamp(blue); return isHex ? '#' + [red, green, blue].map(component=>(`0${component.toString(16)}`).slice(-2)).join('') : (alpha === 1 ? `rgb(${red}, ${green}, ${blue})` : `rgba(${red}, ${green}, ${blue}, ${alpha})`); };Q.Debounce=(id, b, c)=>{ const debounceStorage=Q.getGLOBAL('Debounce') || {}; debounceStorage[id] && clearTimeout(debounceStorage[id]); debounceStorage[id]=setTimeout(c, b); Q.setGLOBAL({Debounce: debounceStorage}); };Q.HSL2RGB=(h, s, l)=>{ if(s === 0){ const gray=l * 255; return [gray, gray, gray]; } const q=l < 0.5 ? l * (1 + s) : l + s - l * s, p=2 * l - q, hueToRgb=(t)=>{ t < 0 && (t += 1); t > 1 && (t -= 1); return t < 1 / 6 ? p + (q - p) * 6 * t : t < 1 / 2 ? q : t < 2 / 3 ? p + (q - p) * 6 * (2 / 3 - t) : p; }; return [hueToRgb(h + 1 / 3) * 255, hueToRgb(h) * 255, hueToRgb(h - 1 / 3) * 255]; };Q.ID=(length=8, b='')=> b + Array.from({length}, ()=>(Math.random() * 16 | 0).toString(16)).join('');Q.RGB2HSL=(r, g, b)=>{ r /= 255, g /= 255, b /= 255; const max=Math.max(r, g, b), min=Math.min(r, g, b); let h, s, l=(max + min) / 2, d=max - min; if(!d) h=s=0; else{ s=l > 0.5 ? d / (2 - max - min) : d / (max + min); h=max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4; h /= 6; } return [h, s, l]; };Q.isDarkColor=(color, b=20, c=100)=>{ let red, green, blue; if(color[0] === '#'){ const f=color.slice(1); const parts=f.length === 3 ? [f[0] + f[0], f[1] + f[1], f[2] + f[2]] : f.length === 6 ? [f.slice(0, 2), f.slice(2, 4), f.slice(4, 6)] : null; if(!parts) throw Error('Invalid f color format'); [red, green, blue]=parts.map(v=>parseInt(v, 16)); }else if(color.startsWith('rgb')){ const arr=color.match(/\d+/g); if(arr && arr.length >= 3) [red, green, blue]=arr.map(Number); else throw Error('Invalid color format'); }else throw Error('Unsupported color format'); return Math.sqrt(0.299 * red ** 2 + 0.587 * green ** 2 + 0.114 * blue ** 2) + b < c; };return Q;})();
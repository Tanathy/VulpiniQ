const Q=(()=>{'use strict';function Q(identifier,attributes,props){if(!(this instanceof Q)){return new Q(identifier,attributes,props);}else if(identifier instanceof HTMLElement || identifier instanceof Node){this.nodes=[identifier];return;}else if(identifier instanceof Q){this.nodes=identifier.nodes;return;}else if(identifier instanceof NodeList){this.nodes=Array.from(identifier);return;}else if(typeof identifier==='string'){let isCreating=!!attributes || identifier.includes('<');if(isCreating){const fragment=document.createDocumentFragment();const pseudo=document.createElement('div');pseudo.innerHTML=identifier;while(pseudo.firstChild){fragment.appendChild(pseudo.firstChild);}this.nodes=Array.from(fragment.childNodes);if(attributes){this.nodes.forEach(el=>{for(const[attr,value]of Object.entries(attributes)){if(attr==='class'){if(Array.isArray(value)){el.classList.add(...value);}else{el.classList.add(...value.split(/\s+/));}}else{el.setAttribute(attr,value);}}});}if(props){this.nodes.forEach(el=>{for(const prop of props){el[prop]=true;}});}}else{let elem=document.querySelectorAll(identifier);this.nodes=Array.from(elem);}}}Q.prototype.addClass=function(classes){const classList=classes.split(' ');return this.each(el=>this.nodes[el].classList.add(...classList));};Q.prototype.animate=function(duration,properties,callback){return this.each(el=>{const element=this.nodes[el];const transitionProperties=Object.keys(properties).map(prop=>`${prop}${duration}ms`).join(',');element.style.transition=transitionProperties;for(const prop in properties){element.style[prop]=properties[prop];}if(typeof callback==='function'){setTimeout(()=>{if(callback)callback.call(element);},duration);}}),this;};Q.prototype.append=function(...nodes){return this.each(el=>{const parent=this.nodes[el];nodes.forEach(child=>{if(typeof child==='string'){parent.insertAdjacentHTML('beforeend',child);}else if(child instanceof HTMLElement || child instanceof Q){parent.appendChild(child.nodes[0]);}else if(Array.isArray(child)|| child instanceof NodeList){Array.from(child).forEach(subchild=>parent.appendChild(subchild));}});});};Q.prototype.attr=function(attribute,value){if(typeof attribute==='object'){return this.each(el=>{for(let key in attribute){if(attribute.hasOwnProperty(key)){this.nodes[el].setAttribute(key,attribute[key]);}}});}else{if(value===undefined){return this.nodes[0]?.getAttribute(attribute)|| null;}return this.each(el=>this.nodes[el].setAttribute(attribute,value));}};Q.prototype.bind=function(event,handler){if(!this._eventDelegation){this._eventDelegation={};}if(!this._eventDelegation[event]){document.addEventListener(event,(e)=>{this.each(el=>{if(this.nodes[el].contains(e.target)){handler.call(e.target,e);}});});this._eventDelegation[event]=true;}return this;};Q.prototype.blur=function(){return this.each(el=>this.nodes[el].blur());};Q.prototype.children=function(){return new Q(this.nodes[0].children);};Q.prototype.click=function(){return this.each(el=>this.nodes[el].click());};Q.prototype.clone=function(){return new Q(this.nodes[0].cloneNode(true));};Q.prototype.closest=function(selector){let el=this.nodes[0];while(el){if(el.matches && el.matches(selector)){return new Q(el);}el=el.parentElement;}return null;};Q.prototype.css=function(property,value){if(typeof property==='object'){return this.each(el=>{for(let key in property){if(property.hasOwnProperty(key)){this.nodes[el].style[key]=property[key];}}});}else{if(value===undefined){return getComputedStyle(this.nodes[0])[property];}return this.each(el=>this.nodes[el].style[property]=value);}};Q.prototype.data=function(key,value){if(value===undefined){return this.nodes[0]?.dataset[key]|| null;}return this.each(el=>this.nodes[el].dataset[key]=value);};Q.prototype.each=function(callback){this.nodes.forEach((el,index)=>callback.call(el,index,el));return this;};Q.prototype.empty=function(){return this.each(el=>this.nodes[el].innerHTML='');};Q.prototype.eq=function(index){return new Q(this.nodes[index]);};Q.prototype.fadeIn=function(duration=400,callback){return this.each(el=>{this.nodes[el].style.display='';this.nodes[el].style.transition=`opacity ${duration}ms`;this.nodes[el].offsetHeight;this.nodes[el].style.opacity=1;setTimeout(()=>{this.nodes[el].style.transition='';if(callback)callback();},duration);});};Q.prototype.fadeOut=function(duration=400,callback){return this.each(el=>{this.nodes[el].style.transition=`opacity ${duration}ms`;this.nodes[el].style.opacity=0;setTimeout(()=>{this.nodes[el].style.transition='';this.nodes[el].style.display='none';if(callback)callback();},duration);});};Q.prototype.fadeTo=function(opacity,duration=400,callback){return this.each(el=>{this.nodes[el].style.transition=`opacity ${duration}ms`;this.nodes[el].offsetHeight;this.nodes[el].style.opacity=opacity;setTimeout(()=>{this.nodes[el].style.transition='';if(callback)callback();},duration);});};Q.prototype.fadeToggle=function(duration=400,callback){return this.each(el=>{if(window.getComputedStyle(this.nodes[el]).opacity==='0'){this.fadeIn(duration,callback);}else{this.fadeOut(duration,callback);}});};Q.prototype.find=function(selector){const foundNodes=this.nodes[0].querySelectorAll(selector);return foundNodes.length ? Q(foundNodes):null;};Q.prototype.first=function(){return new Q(this.nodes[0]);};Q.prototype.focus=function(){return this.each(el=>this.nodes[el].focus());};Q.prototype.hasClass=function(className){return this.nodes[0]?.classList.contains(className)|| false;};Q.prototype.height=function(value){if(value===undefined){return this.nodes[0].offsetHeight;}return this.each(el=>this.nodes[el].style.height=value);};Q.prototype.hide=function(duration=0,callback){return this.each(el=>{const element=this.nodes[el];if(duration===0){element.style.display='none';if(callback)callback();}else{element.style.transition=`opacity ${duration}ms`;element.style.opacity=1;setTimeout(()=>{element.style.opacity=0;element.addEventListener('transitionend',function handler(){element.style.display='none';element.style.transition='';element.removeEventListener('transitionend',handler);if(callback)callback();});},0);}});};Q.prototype.html=function(...content){if(content.length===0){return this.nodes[0]?.innerHTML || null;}return this.each(el=>{el=this.nodes[el];el.innerHTML='';content.forEach(child=>{if(typeof child==='string'){el.insertAdjacentHTML('beforeend',child);}else if(child instanceof Q){child.nodes.forEach(node=>el.appendChild(node));}else if(child instanceof HTMLElement){el.appendChild(child);}else if(Array.isArray(child)|| child instanceof NodeList){Array.from(child).forEach(subchild=>el.appendChild(subchild));}});});};Q.prototype.index=function(index){if(index===undefined){return Array.from(this.nodes[0].parentNode.children).indexOf(this.nodes[0]);}return this.each(el=>{const parent=this.nodes[el].parentNode;const siblings=Array.from(parent.children);const position=siblings.indexOf(el);const target=siblings.splice(index,1)[0];if(position<index){parent.insertBefore(target,el);}else{parent.insertBefore(target,this.nodes[el].nextSibling);}});};Q.prototype.inside=function(selector){return this.nodes[0]?.closest(selector)!==null;};Q.prototype.is=function(selector){const node=this.nodes[0];if(!node)return false;if(typeof selector==='function'){return selector.call(node,0,node);}if(typeof selector==='string'){switch(selector){case ':visible':return node.offsetWidth>0 && node.offsetHeight>0;case ':hidden':return node.offsetWidth===0 || node.offsetHeight===0;case ':hover':return node===document.querySelector(':hover');case ':focus':return node===document.activeElement;case ':blur':return node !==document.activeElement;case ':checked':return node.checked;case ':selected':return node.selected;case ':disabled':return node.disabled;case ':enabled':return !node.disabled;default:return node.matches(selector);}}if(selector instanceof HTMLElement || selector instanceof Node){return node===selector;}if(selector instanceof Q){return node===selector.nodes[0];}return false;};Q.prototype.isExists=function(){return document.body.contains(this.nodes[0]);};Q.prototype.last=function(){return new Q(this.nodes[this.nodes.length-1]);};Q.prototype.off=function(events,handler,options={}){const defaultOptions={capture:false,once:false,passive:false};options={...defaultOptions,...options};return this.each(el=>{events.split(' ').forEach(event=>this.nodes[el].removeEventListener(event,handler,options));});};Q.prototype.offset=function(){const rect=this.nodes[0].getBoundingClientRect();return{top:rect.top+window.scrollY,left:rect.left+window.scrollX};};Q.prototype.on=function(events,handler,options={}){const defaultOptions={capture:false,once:false,passive:false};options={...defaultOptions,...options};return this.each(el=>{events.split(' ').forEach(event=>this.nodes[el].addEventListener(event,handler,options));});};Q.prototype.parent=function(){return new Q(this.nodes[0].parentNode);};Q.prototype.position=function(){return{top:this.nodes[0].offsetTop,left:this.nodes[0].offsetLeft};};Q.prototype.prepend=function(...nodes){return this.each(el=>{const parent=this.nodes[el];nodes.forEach(child=>{if(typeof child==='string'){parent.insertAdjacentHTML('afterbegin',child);}else if(child instanceof HTMLElement || child instanceof Q){parent.insertBefore(child.nodes[0],parent.firstChild);}else if(Array.isArray(child)|| child instanceof NodeList){Array.from(child).forEach(subchild=>parent.insertBefore(subchild,parent.firstChild));}});});};Q.prototype.prop=function(property,value){if(value===undefined){return this.nodes[0]?.[property]|| null;}return this.each(function(index,el){el[property]=value;});};Q.prototype.remove=function(){return this.each(el=>this.nodes[el].remove());};Q.prototype.removeAttr=function(attribute){return this.each(el=>this.nodes[el].removeAttribute(attribute));};Q.prototype.removeClass=function(classes){const classList=classes.split(' ');return this.each(el=>this.nodes[el].classList.remove(...classList));};Q.prototype.removeData=function(key){return this.each(el=>delete this.nodes[el].dataset[key]);};Q.prototype.removeProp=function(property){return this.each(el=>delete this.nodes[el][property]);};Q.prototype.removeTransition=function(){return this.each(el=>this.nodes[el].style.transition='');};Q.prototype.scrollHeight=function(){return this.nodes[0].scrollHeight;};Q.prototype.scrollLeft=function(value,increment=false){if(value===undefined){return this.nodes[0].scrollLeft;}return this.each(el=>{const maxScrollLeft=this.nodes[el].scrollWidth-this.nodes[el].clientWidth;if(increment){this.nodes[el].scrollLeft=Math.min(this.nodes[el].scrollLeft+value,maxScrollLeft);}else{this.nodes[el].scrollLeft=Math.min(value,maxScrollLeft);}});};Q.prototype.scrollTop=function(value,increment=false){if(value===undefined){return this.nodes[0].scrollTop;}return this.each(el=>{const maxScrollTop=this.nodes[el].scrollHeight-this.nodes[el].clientHeight;if(increment){this.nodes[el].scrollTop=Math.min(this.nodes[el].scrollTop+value,maxScrollTop);}else{this.nodes[el].scrollTop=Math.min(value,maxScrollTop);}});};Q.prototype.scrollWidth=function(){return this.nodes[0].scrollWidth;};Q.prototype.show=function(duration=0,callback){return this.each(el=>{const element=this.nodes[el];if(duration===0){element.style.display='';if(callback)callback();}else{element.style.transition=`opacity ${duration}ms`;element.style.opacity=0;element.style.display='';setTimeout(()=>{element.style.opacity=1;element.addEventListener('transitionend',function handler(){element.style.transition='';element.removeEventListener('transitionend',handler);if(callback)callback();});},0);}});};Q.prototype.size=function(){return{width:this.nodes[0].offsetWidth,height:this.nodes[0].offsetHeight};};Q.prototype.text=function(content){if(content===undefined){return this.nodes[0]?.textContent || null;}return this.each(el=>this.nodes[el].textContent=content);};Q.prototype.toggle=function(){return this.each(el=>this.nodes[el].style.display=this.nodes[el].style.display==='none' ? '':'none');};Q.prototype.toggleClass=function(className){return this.each(el=>this.nodes[el].classList.toggle(className));};Q.prototype.trigger=function(event){return this.each(function(index,el){el.dispatchEvent(new Event(event));});};Q.prototype.unwrap=function(){return this.each(el=>{const parent=this.nodes[el].parentNode;if(parent !==document.body){parent.replaceWith(...this.nodes);}});};Q.prototype.val=function(value){if(value===undefined){return this.nodes[0]?.value || null;}return this.each(el=>this.nodes[el].value=value);};Q.prototype.width=function(value){if(value===undefined){return this.nodes[0].offsetWidth;}return this.each(el=>this.nodes[el].style.width=value);};Q.prototype.wrap=function(wrapper){return this.each(el=>{const parent=this.nodes[el].parentNode;const newParent=typeof wrapper==='string' ? document.createElement(wrapper):wrapper;parent.insertBefore(newParent,this.nodes[el]);newParent.appendChild(this.nodes[el]);});};Q.prototype.wrapAll=function(wrapper){return this.each(el=>{const parent=this.nodes[el].parentNode;const newParent=typeof wrapper==='string' ? document.createElement(wrapper):wrapper;parent.insertBefore(newParent,this.nodes[0]);this.nodes.forEach(child=>newParent.appendChild(child));});};Q.prototype.zIndex=function(value){if(value===undefined){let zIndex=this.nodes[0].style.zIndex;if(!zIndex){zIndex=window.getComputedStyle(this.nodes[0]).zIndex;}return zIndex;}return this.each(el=>this.nodes[el].style.zIndex=value);};Q.Done=(function(){const callbacks=[];window.addEventListener('load',()=>{callbacks.forEach(callback=>callback());});return function(callback){callbacks.push(callback);};})();Q.ID=function(length=8){const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';return Array.from({length},()=>chars.charAt(Math.floor(Math.random()*chars.length))).join('');};Q.Leaving=(function(){const callbacks=[];window.addEventListener('beforeunload',(event)=>{callbacks.forEach(callback=>callback(event));});return function(callback){callbacks.push(callback);};})();Q.Ready=(function(){const callbacks=[];document.addEventListener('DOMContentLoaded',()=>{callbacks.forEach(callback=>callback());},{once:true});return function(callback){if(document.readyState==='loading'){callbacks.push(callback);}else{callback();}};})();Q.Resize=(function(){const callbacks=[];window.addEventListener('resize',()=>{const width=window.innerWidth;const height=window.innerHeight;callbacks.forEach(callback=>callback(width,height));});return function(callback){callbacks.push(callback);};})();return Q;})();
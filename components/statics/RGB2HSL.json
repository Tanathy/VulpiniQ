{
  "Name": "RGB to HSL Converter",
  "Method": "Static",
  "Desc": "Converts RGB (Red, Green, Blue) color values to HSL (Hue, Saturation, Lightness) format.",
  "Long Desc": "The RGB2HSL utility transforms color representations from the RGB color space to the HSL color space. This conversion is valuable because HSL separates the color into components that are more intuitive for color manipulation: hue (the base color), saturation (the intensity of the color), and lightness (how bright or dark the color is). By converting RGB values to HSL, developers can more easily perform operations like adjusting brightness, creating monochromatic color schemes, or generating harmonious color palettes based on hue relationships. The function implements the standard algorithm for RGB to HSL conversion, handling edge cases such as grayscale colors. This utility is particularly useful when implementing color pickers, theme generators, or any feature requiring intuitive color manipulations.",
  "Type": "Color Conversion",
  "Example": [
    "// Convert a vivid red from RGB to HSL\nconst red = 255;\nconst green = 0;\nconst blue = 0;\nconst hslColor = Q.RGB2HSL(red, green, blue);\nconsole.log(`Hue: ${hslColor[0].toFixed(2)}, Saturation: ${hslColor[1].toFixed(2)}, Lightness: ${hslColor[2].toFixed(2)}`);",
    "// Generate a lighter shade of a color\nlet baseRed = 64;\nlet baseGreen = 128;\nlet baseBlue = 255;\nlet hsl = Q.RGB2HSL(baseRed, baseGreen, baseBlue);\nlet lighterHSL = [hsl[0], hsl[1], Math.min(1, hsl[2] + 0.2)];",
    "var rgb = {r: 142, g: 68, b: 173};\nvar hsl = Q.RGB2HSL(rgb.r, rgb.g, rgb.b);\nvar adjustedHue = (hsl[0] + 0.5) % 1; // Complementary color\nvar complementaryHsl = [adjustedHue, hsl[1], hsl[2]];"
  ],
  "Variables": ["r", "g", "b", "max", "min", "h", "s", "l", "d"]
}

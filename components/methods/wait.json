{
    "Name": "wait",
    "Method": "Prototype",
    "Desc": "Returns a promise that resolves with the Q object after a given time. Enables async chainable actions.",
    "LongDesc": "Creates a timing-based promise that resolves with the original Q object after a specified delay in milliseconds. This method enables clean, readable code for sequential animations or delayed operations without nested callbacks. It's particularly useful in asynchronous workflows where you want to pause before continuing with a chain of operations, providing a more intuitive alternative to setTimeout when working with promises. Works with async/await and .then() chaining. Does nothing for empty selection but still resolves the promise.",
    "Type": "Utility",
    "Example": [
        "Q('.text').wait(1000).then(q => q.text('Hello, World!')); // Promise chaining",
        "async function animate() { await Q('#element').addClass('start').wait(500); Q('#element').addClass('end'); } // Async/await",
        "Q('.notification').show().wait(3000).then(q => q.hide()); // Hide after delay",
        "const delay = 800; Q('.message').fadeIn().wait(delay).then(q => q.fadeOut()); // Dynamic delay",
        "Q('.missing').wait(100).then(q => q.addClass('checked')); // Works for empty selection"
    ],
    "Dependencies": [],
    "Variables": []
}

{
  "Name": "Fetch",
  "Method": "Static",
  "Desc": "A utility function to make HTTP requests using the Fetch API with extended features.",
  "Long Desc": "This function provides a wrapper around the Fetch API, adding features such as automatic retries, exponential backoff, timeout, request body serialization, response validation, query parameters, and aborting requests. It simplifies making HTTP requests and handling common scenarios like network errors and timeouts. The function returns an object with an abort method to cancel the request.",
  "Type": "Utility",
  "Example": [
    "// Make a GET request\nQ.Fetch('https://example.com/data', (error, data) => {\n  if (error) {\n    console.error('Error:', error);\n  } else {\n    console.log('Data:', data);\n  }\n});",
    "// Make a POST request with a JSON body\nQ.Fetch('https://example.com/submit', (error, data) => {\n  if (error) {\n    console.error('Error:', error);\n  } else {\n    console.log('Data:', data);\n  }\n}, {\n  method: 'POST',\n  body: { name: 'John', age: 30 }\n});",
    "// Make a request with query parameters\nQ.Fetch('https://example.com/search', (error, data) => {\n  if (error) {\n    console.error('Error:', error);\n  } else {\n    console.log('Data:', data);\n  }\n}, {\n  query: { q: 'keyword', page: 1 }\n});",
    "// Abort a request\nlet fetchRequest = Q.Fetch('https://example.com/long-running-task', (error, data) => {\n  // ...\n});\nsetTimeout(() => {\n  fetchRequest.abort();\n}, 5000);"
  ],
  "Variables": [
    "url",
    "callback",
    "options",
    "method",
    "headers",
    "body",
    "contentType",
    "responseType",
    "credentials",
    "retries",
    "retryDelay",
    "exponentialBackoff",
    "timeout",
    "validateResponse",
    "query",
    "externalSignal",
    "requestBody",
    "urlObject",
    "controller",
    "signal",
    "doFetch",
    "attempt",
    "timeoutId",
    "response",
    "result",
    "validatedData",
    "error",
    "delay",
    "fetchRequest"
  ]
}

{
  "Name": "Thread",
  "Method": "Static",
  "Desc": "A utility function to create and manage a thread pool for executing tasks in parallel using web workers.",
  "Long Desc": "This function provides a way to create and manage a thread pool for executing tasks in parallel using web workers. It allows you to specify the maximum number of workers in the pool, push tasks to the pool, and receive results via callbacks. It also supports aborting tasks and dynamically adjusting the number of workers. This can improve performance for computationally intensive tasks by distributing the workload across multiple threads.",
  "Type": "Utility",
  "Example": [
    "// Create a new thread pool with 4 workers\nlet threadPool = Q.Thread(4);",
    "// Push a task to the thread pool\nthreadPool.Push((input) => {\n  let sum = 0;\n  for (let i = 0; i < input; i++) {\n    sum += i;\n  }\n  return sum;\n}, 100000).then(result => {\n  console.log('Result:', result);\n});",
    "// Add a result callback\nthreadPool.Result((result) => {\n  console.log('Task completed:', result);\n});",
    "// Add a done callback\nthreadPool.Done(() => {\n  console.log('All tasks completed');\n});",
    "// Abort the thread pool\n// threadPool.Abort();"
  ],
  "Variables": [
    "maxWorkers",
    "ThreadPool",
    "workers",
    "taskQueue",
    "activeTasks",
    "taskIdCounter",
    "resultCallbacks",
    "doneCallbacks",
    "aborted",
    "blobURL",
    "index",
    "difference",
    "code",
    "workerInstance",
    "taskId",
    "functionCode",
    "parameters",
    "executionFunction",
    "result",
    "error",
    "task",
    "idleIndex",
    "callbacks",
    "newWorkerCount",
    "taskInput",
    "taskFunction",
    "promiseResult",
    "callbackFunction"
  ]
}

{
  "Name": "JSON",
  "Method": "Instance",
  "Desc": "A utility class to parse, deflate, inflate, merge, sort, flatten, and unflatten JSON data.",
  "Long Desc": "This class provides a set of methods to manipulate JSON data. It allows parsing JSON with a callback function, deflating and inflating JSON to reduce its size, merging two JSON objects, sorting JSON keys and values, flattening a nested JSON object into a single-level object, and unflattening a single-level object into a nested JSON object. The class is instantiated with the JSON data, and the methods are called on the instance.",
  "Type": "Utility",
  "Example": [
    "// Create a new JSON instance\nlet jsonData = { name: 'John', age: 30, city: 'New York' };\nlet jsonInstance = new Q.JSON(jsonData);",
    "// Parse the JSON data and modify the values\njsonInstance.Parse({ modify: true }, (key, value) => {\n  if (typeof value === 'string') return value.toUpperCase();\n  return value;\n});\nconsole.log(jsonInstance.json); // Output: { name: 'JOHN', age: 30, city: 'NEW YORK' }",
    "// Deflate the JSON data\nlet deflated = jsonInstance.deflate(3);\nconsole.log(deflated);",
    "// Inflate the JSON data\nlet inflatedData = jsonInstance.inflate(deflated);\nconsole.log(inflatedData);",
    "// Merge with another JSON object\nlet otherJson = { country: 'USA' };\njsonInstance.merge(otherJson);\nconsole.log(jsonInstance.json); // Output: { name: 'JOHN', age: 30, city: 'NEW YORK', country: 'USA' }",
    "// Sort the keys\njsonInstance.sortKeys();\nconsole.log(jsonInstance.json);",
    "// Flatten the JSON data\nlet flattened = jsonInstance.flatten();\nconsole.log(flattened);",
    "// Unflatten the JSON data\nlet unflattenedData = jsonInstance.unflatten(flattened);\nconsole.log(unflattenedData);"
  ],
  "Variables": [
    "jsonData",
    "options",
    "callback",
    "modify",
    "recursive",
    "process",
    "data",
    "key",
    "newValue",
    "map",
    "deflateCounter",
    "level",
    "replaceRecursive",
    "obj",
    "newKey",
    "deflatedData",
    "inflatedJson",
    "reverseMap",
    "restoreRecursive",
    "originalKey",
    "value",
    "inflatedData",
    "otherJson",
    "deepMerge",
    "target",
    "source",
    "recursive",
    "reverse",
    "sortObject",
    "keys",
    "sorted",
    "entries",
    "a",
    "b",
    "aValue",
    "bValue",
    "keyProp",
    "valueProp",
    "cmpKey",
    "cmpValue",
    "cmp",
    "prefix",
    "result",
    "flattenRec",
    "path",
    "compoundKey",
    "accumulator",
    "currentKey",
    "index",
    "keysArray"
  ]
}

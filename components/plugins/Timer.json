{
  "Name": "Timer",
  "Method": "Static",
  "Desc": "A utility function to create and manage timers.",
  "Long Desc": "This function provides a way to create and manage timers with various options. It allows you to specify a callback function to be executed at a certain interval, an identifier for the timer, the number of ticks, the delay between ticks, whether to interrupt an existing timer with the same identifier, whether to automatically start the timer, and a callback function to be executed when the timer is done. The function also provides methods to pause, resume, and stop the timer.",
  "Type": "Utility",
  "Example": [
    "// Create a new timer that executes every second and stops after 5 ticks\nlet timer = Q.Timer(() => {\n  console.log('Tick');\n}, 'myTimer', {\n  tick: 5,\n  delay: 1000,\n  interrupt: true,\n  done: () => {\n    console.log('Timer done');\n  }\n});",
    "// Pause the timer\ntimer.pause();",
    "// Resume the timer\ntimer.resume();",
    "// Stop the timer\ntimer.stop();",
    "// Stop all active timers\nQ.Timer.stopAll();"
  ],
  "Variables": [
    "callback",
    "identifier",
    "options",
    "defaults",
    "config",
    "timerControl",
    "tickCount",
    "isPaused",
    "remainingDelay",
    "startTime",
    "timerHandle",
    "elapsed",
    "delayTime",
    "startTick",
    "tickHandler"
  ]
}
